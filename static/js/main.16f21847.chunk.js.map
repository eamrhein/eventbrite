{"version":3,"sources":["token.js","timeUtil.js","valdiationUtil.js","App.js","apiutil.js","serviceWorker.js","index.js"],"names":["apikey","timeOfDay","hours","minutes","ampm","times","i","Math","floor","push","key","roundDate","date","setDate","getDate","setHours","appendTime","timeString","twelveHourtimeArray","split","timeArray","parseInt","createDate","dateString","dateArray","getHours","getMinutes","year","month","day","Date","parse12htime","toLocaleTimeString","slice","parseDate","getFullYear","toString","getMonth","calcDuration","start","end","parse","isValidTime","checkCharLimit","str","limit","length","validationSchema","title","valid","invalid","image","organizer","ticketName","numberOfTickets","price","parseEvent","desc","dateStart","dateEnd","imgid","is_series","event","name","html","description","timezone","utc","toJSON","currency","logo_id","App","useState","timeUtil","setDateStart","dateStartEndTime","setStartDateEndTime","setDateEnd","occurences","setOccurences","duration","setDuration","setTitle","setDescription","imgurl","setImgurl","setImgid","setTicketName","setNumberOfTickets","setPrice","validationUtil","setValidationSchema","eventurl","setEventurl","setValidity","bool","createDays","dates","curr","addDays","days","this","valueOf","call","handleInputs","e","time","endtime","target","value","Container","Row","className","Col","md","Form","onSubmit","preventDefault","Object","keys","every","stopPropagation","eventPackage","data","a","async","fetch","method","body","JSON","stringify","headers","res","json","resData","apiutil","then","url","console","log","parent","rule","id","occurrence_duration","recurrence_rule","schedule","cost","count","ticket_class","quantity_total","free","err","message","Group","Label","Control","required","isInvalid","isValid","type","maxLength","placeholder","onChange","Feedback","disabled","defaultValue","as","Alert","variant","min","currentTarget","files","img","URL","createObjectURL","fetchToken","args","formData","FormData","append","config","response","ok","Error","statusText","upload_url","upload_data","token","upload_token","accept","htmlFor","Image","alt","src","fluid","rows","max","step","Button","size","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16f21847.chunk.js","sourcesContent":["let apikey = \"2HFMBE2GUW52R2FYGTBQ\";\n\nexport default apikey;\n","import React from \"react\";\n// Create Day Dropdown list\nexport const dayOfWeek = () => {\n  let days = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n  ];\n  days = days.map((day, i) => <option key={i}>{day}</option>);\n  return days;\n};\n\n// Crate Time Dropdown list\nexport const timeOfDay = () => {\n  let times = [];\n  let hours, minutes, ampm;\n  for (let i = 0; i <= 1440; i += 30) {\n    hours = Math.floor(i / 60);\n    minutes = i % 60;\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n    ampm = hours % 24 < 12 ? \"AM\" : \"PM\";\n    hours = hours % 12;\n    if (hours === 0) {\n      hours = 12;\n    }\n    times.push(\n      <option key={i}>\n        {hours}:{minutes} {ampm}\n      </option>\n    );\n  }\n  return times;\n};\n\n// rounds a javascript Date object  to the nearest half hour\nexport const roundDate = (date, hours) => {\n  date.setDate(date.getDate() + 1);\n  date.setHours(hours, 0, 0, 0);\n  return date;\n};\n\n// sets the time of a Date Object\nexport const appendTime = (date, timeString) => {\n  // resets the time\n  date.setHours(0, 0, 0, 0);\n  //Split hours minutes and am / pm for calculation\n  const twelveHourtimeArray = timeString.split(\" \");\n  const ampm = twelveHourtimeArray[1];\n  let timeArray = twelveHourtimeArray[0].split(\":\");\n  let hours = parseInt(timeArray[0]);\n  let minutes = parseInt(timeArray[1]);\n  // if it is PM add 12 hours\n  if (hours === 12) {\n    hours = 0;\n  }\n  if (ampm === \"PM\") {\n    hours = hours + 12;\n  }\n  //set hours and minutes to new hours minutes\n  date.setHours(hours, minutes, 0, 0);\n  return date;\n};\n\n// sets the date of a Date object\nexport const createDate = (date, dateString) => {\n  let dateArray = dateString.split(\"-\");\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let year = parseInt(dateArray[0]);\n  let month = parseInt(dateArray[1] - 1);\n  let day = parseInt(dateArray[2]);\n  let newDate = new Date(year, month, day, hours, minutes, 0, 0);\n  return newDate;\n};\n\nexport const parse12htime = date => {\n  let dateString = date.toLocaleTimeString();\n  dateString = dateString.slice(0, 4) + dateString.slice(7);\n  return dateString;\n};\n\nexport const parseDate = date => {\n  let year = date.getFullYear().toString();\n  let month = (date.getMonth() + 1).toString();\n  month = month < 10 ? \"0\" + month : month;\n  let day = date.getDate().toString();\n  day = day < 10 ? \"0\" + day : day;\n  return `${year}-${month}-${day}`;\n};\n\nexport const calcDuration = (start, end) => {\n  return (Date.parse(end) - Date.parse(start)) / 1000;\n};\n","export const isValidTime = (start, end) => {\n  return Date.parse(start) >= Date.parse(end) ? false : true;\n};\n\nexport const checkCharLimit = (str, limit) => {\n  if (str.length <= limit) {\n    return true;\n  } else return false;\n};\n\nexport const validationSchema = {\n  title: {\n    valid: null,\n    invalid: null\n  },\n  date: {\n    valid: null,\n    invalid: null\n  },\n  image: {\n    valid: null,\n    invalid: null\n  },\n  organizer: {\n    valid: null,\n    invalid: null\n  },\n  ticketName: {\n    valid: null,\n    invalid: null\n  },\n  numberOfTickets: {\n    valid: null,\n    invalid: null\n  },\n  price: {\n    valid: null,\n    invalid: null\n  }\n};\n\nexport const parseEvent = (\n  title,\n  desc,\n  dateStart,\n  dateEnd,\n  imgid,\n  is_series\n) => ({\n  event: {\n    name: {\n      html: title\n    },\n    description: {\n      html: desc\n    },\n    start: {\n      timezone: \"America/Los_Angeles\",\n      utc: dateStart.toJSON().slice(0, 19) + \"Z\"\n    },\n    end: {\n      timezone: \"America/Los_Angeles\",\n      utc: dateEnd.toJSON().slice(0, 19) + \"Z\"\n    },\n    currency: \"USD\",\n    logo_id: imgid,\n    is_series\n  }\n});\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport {\n  Form,\n  Container,\n  Row,\n  Col,\n  Button,\n  Alert,\n  Image\n} from \"react-bootstrap\";\nimport * as apiutil from \"./apiutil\";\nimport * as timeUtil from \"./timeUtil\";\nimport * as validationUtil from \"./valdiationUtil\";\n\nfunction App() {\n  // State Setters and getters\n  const [dateStart, setDateStart] = useState(timeUtil.roundDate(new Date(), 0));\n  const [dateStartEndTime, setStartDateEndTime] = useState(\n    timeUtil.roundDate(new Date(), 1)\n  );\n  const [dateEnd, setDateEnd] = useState(timeUtil.roundDate(new Date(), 1));\n  const [occurences, setOccurences] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [imgurl, setImgurl] = useState(null);\n  const [imgid, setImgid] = useState(null);\n  const [ticketName, setTicketName] = useState(\"\");\n  const [numberOfTickets, setNumberOfTickets] = useState(100);\n  const [price, setPrice] = useState(0);\n  const [validationSchema, setValidationSchema] = useState(\n    validationUtil.validationSchema\n  );\n  const [eventurl, setEventurl] = useState(null);\n  //Function to set an input to valid or invalid\n  const setValidity = (bool, key) => {\n    if (bool) {\n      setValidationSchema({\n        ...validationSchema,\n        [key]: {\n          valid: bool\n        }\n      });\n    } else {\n      setValidationSchema({\n        ...validationSchema,\n        [key]: {\n          invalid: !bool\n        }\n      });\n    }\n  };\n\n  const createDays = (start, end) => {\n    let dates = [];\n    let curr = start;\n    let addDays = function(days) {\n      let date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n    while (curr <= end) {\n      dates.push(curr);\n      curr = addDays.call(curr, 7);\n    }\n    return dates.length;\n  };\n\n  //input handler validates and sets inputs on change\n  // switch statement based on the name of the element\n  const handleInputs = e => {\n    let time;\n    let days;\n    let endtime;\n    switch (e.target.name) {\n      case \"title\":\n        validationUtil.checkCharLimit(e.target.value, 70) &&\n        e.target.value.length > 0\n          ? setValidity(true, \"title\")\n          : setValidity(false, \"title\");\n        setTitle(e.target.value);\n        break;\n      case \"ticketName\":\n        validationUtil.checkCharLimit(e.target.value, 70) &&\n        e.target.value.length > 0\n          ? setValidity(true, \"ticketName\")\n          : setValidity(false, \"ticketName\");\n        setTicketName(e.target.value);\n        break;\n      case \"from\":\n        time = timeUtil.appendTime(dateStart, e.target.value);\n        validationUtil.isValidTime(time, dateEnd)\n          ? setValidity(true, \"date\")\n          : setValidity(false, \"date\");\n        setDateStart(time);\n        setDuration(timeUtil.calcDuration(time, dateStartEndTime));\n        break;\n      case \"to\":\n        time = timeUtil.appendTime(dateEnd, e.target.value);\n        endtime = timeUtil.appendTime(dateStartEndTime, e.target.value);\n        validationUtil.isValidTime(dateStart, time)\n          ? setValidity(true, \"date\")\n          : setValidity(false, \"date\");\n        setDateEnd(time);\n        setStartDateEndTime(endtime);\n        setDuration(timeUtil.calcDuration(dateStart, endtime));\n        break;\n      case \"occursFrom\":\n        time = timeUtil.createDate(dateStart, e.target.value);\n        validationUtil.isValidTime(time, dateEnd)\n          ? setValidity(true, \"date\")\n          : setValidity(false, \"date\");\n        setDateStart(time);\n        days = createDays(time, dateEnd);\n        setOccurences(days);\n        break;\n      case \"occursUntil\":\n        time = timeUtil.createDate(dateEnd, e.target.value);\n        validationUtil.isValidTime(dateStart, time)\n          ? setValidity(true, \"date\")\n          : setValidity(false, \"date\");\n        setDateEnd(time);\n        days = createDays(dateStart, time);\n        setOccurences(days);\n        break;\n      case \"description\":\n        setDescription(e.target.value);\n        break;\n      case \"numberOfTickets\":\n        setNumberOfTickets(e.target.value);\n        break;\n      case \"price\":\n        setPrice(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  //Sumbit Handling\n  // Check if form is valid\n  // if not valid show error messages\n  // if valid\n  //  Create Event,\n  //  Create Tickets,\n  //\n  const handleSubmit = e => {\n    e.preventDefault();\n    const validKeys = key => {\n      let value = validationSchema[key].valid;\n      return value === true || value === null;\n    };\n    const keys = Object.keys(validationSchema);\n    if (keys.every(validKeys)) {\n      e.stopPropagation();\n      let eventPackage = validationUtil.parseEvent(\n        title,\n        description,\n        dateStartEndTime,\n        dateEnd,\n        imgid,\n        occurences > 1\n      );\n      try {\n        apiutil\n          .createEvent(eventPackage)\n          .then(res => {\n            setEventurl(res.url);\n            console.log(res);\n            return res;\n          })\n          .then(parent => {\n            if (occurences > 1) {\n              let rule = `DTSTART:${dateStart.toJSON()}\\nRRULE:FREQ=WEEKLY;COUNT=${occurences}\n              `;\n              apiutil.createSeries(parent.id, duration, rule);\n            }\n            return parent;\n          })\n          .then(parent => {\n            apiutil.createTicket(parent.id, price, numberOfTickets, ticketName);\n            return parent;\n          })\n          .then(parent => {\n            apiutil.publishEvent(parent.id);\n          });\n      } catch (err) {\n        console.log(err.message);\n      }\n    } else {\n      console.log(\"invalid\");\n    }\n  };\n\n  // image upload\n  // 1 use local image until upload is successfull\n  // 2 get upload token from eventbrite api\n  // 3 upload image to aws using evenbrite data\n  // 5 get image url from evenbrite api\n  // 5 set new image url as new image\n  const uploadBanner = e => {\n    if (e.currentTarget.files[0]) {\n      let img = e.currentTarget.files[0];\n      setImgurl(URL.createObjectURL(img));\n      apiutil.getUploadSignature().then(res => {\n        apiutil\n          .uploadImage(img, res.upload_url, res.upload_data)\n          .then(() => apiutil.getUploadedUrl(res.upload_token))\n          .then(res => {\n            setImgid(res.id);\n            setImgurl(res.url);\n          });\n      });\n    }\n  };\n  return (\n    <main>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <h1>eventbrite</h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <h4>Create A Repeating Event</h4>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form onSubmit={handleSubmit}>\n              <Form.Group>\n                <Form.Label>Title</Form.Label>\n                <Form.Control\n                  required\n                  isInvalid={validationSchema.title.invalid}\n                  isValid={validationSchema.title.valid}\n                  name=\"title\"\n                  type=\"text\"\n                  maxLength=\"70\"\n                  placeholder=\"Give it a short distinct name\"\n                  value={title}\n                  onChange={handleInputs}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks Good\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  A Title is required\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Location</Form.Label>\n                <Form.Control disabled defaultValue=\"San Francisco\" />\n              </Form.Group>\n              <Form.Group>\n                <h5>Schedule Dates</h5>\n              </Form.Group>\n              <Form.Group>\n                <Row>\n                  <Col>\n                    <Form.Label>How Often?</Form.Label>\n                    <Form.Control disabled defaultValue=\"Weekly\" />\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group>\n                <Row>\n                  <Col>\n                    <Form.Label>From</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"from\"\n                      onChange={handleInputs}\n                      value={timeUtil.parse12htime(dateStart)}\n                      isInvalid={validationSchema.date.invalid}\n                      isValid={validationSchema.date.valid}\n                      as=\"select\"\n                    >\n                      {timeUtil.timeOfDay()}\n                    </Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                      Must be before end time.\n                    </Form.Control.Feedback>\n                  </Col>\n                  <Col>\n                    <Form.Label>To</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"to\"\n                      onChange={handleInputs}\n                      value={timeUtil.parse12htime(dateEnd)}\n                      as=\"select\"\n                      isInvalid={validationSchema.date.invalid}\n                      isValid={validationSchema.date.valid}\n                    >\n                      {timeUtil.timeOfDay()}\n                    </Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                      Must be before end time.\n                    </Form.Control.Feedback>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    {duration > 0 ? (\n                      <Alert className=\"eventlist\" variant=\"success\">\n                        Duration of {duration / 60} Minutes\n                      </Alert>\n                    ) : (\n                      \"\"\n                    )}\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group>\n                <Row>\n                  <Col>\n                    <Form.Label>Occurs From</Form.Label>\n                    <Form.Control\n                      name=\"occursFrom\"\n                      type=\"date\"\n                      min={timeUtil.parseDate(\n                        timeUtil.roundDate(new Date(), 0)\n                      )}\n                      onChange={handleInputs}\n                      value={timeUtil.parseDate(dateStart)}\n                      isInvalid={validationSchema.date.invalid}\n                      isValid={validationSchema.date.valid}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Must be before end date.\n                    </Form.Control.Feedback>\n                  </Col>\n                  <Col>\n                    <Form.Label>Occurs Until</Form.Label>\n                    <Form.Control\n                      name=\"occursUntil\"\n                      type=\"date\"\n                      onChange={handleInputs}\n                      min={timeUtil.parseDate(\n                        timeUtil.roundDate(new Date(), 1)\n                      )}\n                      value={timeUtil.parseDate(dateEnd)}\n                      isInvalid={validationSchema.date.invalid}\n                      isValid={validationSchema.date.valid}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Must be after start date.\n                    </Form.Control.Feedback>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    {occurences > 0 ? (\n                      <Alert className=\"eventlist\" variant=\"success\">\n                        {occurences} Events\n                      </Alert>\n                    ) : (\n                      \"\"\n                    )}\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Event Image</Form.Label>\n                <Row>\n                  <Col className=\"image-upload\">\n                    <div className=\"img-upload-inner\">\n                      <Form.Control\n                        className=\"inputfile\"\n                        id=\"file\"\n                        type=\"file\"\n                        onChange={uploadBanner}\n                        accept=\"image/png, image/jpeg\"\n                        isInvalid={true}\n                      />\n                      <Form.Label htmlFor=\"file\">\n                        {imgurl ? (\n                          <Image alt=\"banner\" src={imgurl} fluid />\n                        ) : (\n                          <div>\n                            {\" \"}\n                            <i className=\"fa fa-camera\" />\n                            <h6>Add Event Image</h6>\n                            <p>\n                              Choose a compelling image that brings your event\n                              to life\n                            </p>\n                          </div>\n                        )}\n                      </Form.Label>\n                      <Form.Control.Feedback type=\"invalid\">\n                        Must be less than 10MB.\n                      </Form.Control.Feedback>\n                    </div>\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Event Description</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"4\"\n                  name=\"description\"\n                  onChange={handleInputs}\n                  value={description}\n                />\n              </Form.Group>\n              <Form.Group>\n                <Row>\n                  <Col>\n                    <Form.Label>Ticket Name</Form.Label>\n                    <Form.Control\n                      required\n                      type=\"text\"\n                      value={ticketName}\n                      name=\"ticketName\"\n                      onChange={handleInputs}\n                      placeholder=\"Ticket Name\"\n                      isValid={validationSchema.ticketName.valid}\n                      isInvalid={validationSchema.ticketName.invalid}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Ticket name is required.\n                    </Form.Control.Feedback>\n                  </Col>\n                  <Col>\n                    <Form.Label>Quantity Available</Form.Label>\n                    <Form.Control\n                      value={numberOfTickets}\n                      min=\"1\"\n                      max=\"30000\"\n                      name=\"numberOfTickets\"\n                      onChange={handleInputs}\n                      type=\"number\"\n                      placeholder=\"100\"\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Must have one or more tickets.\n                    </Form.Control.Feedback>\n                  </Col>\n                  <Col>\n                    <Form.Label>Price</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      min=\"0.00\"\n                      max=\"10000.00\"\n                      step=\"0.01\"\n                      placeholder=\"Free\"\n                      name=\"price\"\n                      value={price}\n                      onChange={handleInputs}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Must be a postitive number that is less than 10000\n                    </Form.Control.Feedback>\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Button variant=\"success\" type=\"submit\" size=\"lg\">\n                Create Event\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n      <Row>\n        <Col>\n          {eventurl ? (\n            <Alert className=\"eventlist\" variant=\"success\">\n              <h6>List of Events</h6>\n              <a href={eventurl}>{eventurl}</a>\n            </Alert>\n          ) : (\n            \"\"\n          )}\n        </Col>\n      </Row>\n    </main>\n  );\n}\n\nexport default App;\n","import apikey from \"./token\";\n\nexport async function createEvent(data) {\n  const res = await fetch(\n    `https://www.eventbriteapi.com/v3/organizations/64592771355/events/?token=${apikey}`,\n    {\n      method: \"post\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  const resData = await res.json();\n  return resData;\n}\n\nexport async function createSeries(id, occurrence_duration, recurrence_rule) {\n  const res = await fetch(\n    `https://www.eventbriteapi.com/v3/events/${id}/schedules/?token=${apikey}`,\n    {\n      method: \"post\",\n      body: JSON.stringify({\n        schedule: {\n          occurrence_duration,\n          recurrence_rule\n        }\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  let data = await res.json();\n  console.log(data);\n  return data;\n}\n\nexport async function createTicket(id, cost, count, name) {\n  let res;\n  if (cost === 0) {\n    res = await fetch(\n      ` https://www.eventbriteapi.com/v3/events/${id}/ticket_classes/?token=${apikey}`,\n      {\n        method: \"post\",\n        body: JSON.stringify({\n          ticket_class: {\n            name,\n            quantity_total: count,\n            free: true\n          }\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n  } else {\n    res = await fetch(\n      ` https://www.eventbriteapi.com/v3/events/${id}/ticket_classes/?token=${apikey}`,\n      {\n        method: \"post\",\n        body: JSON.stringify({\n          ticket_class: {\n            name,\n            quantity_total: count,\n            cost: `USD, ${cost}`\n          }\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n  }\n  let data = await res.json();\n  console.log(data);\n  return data;\n}\n\nexport async function publishEvent(id) {\n  const res = await fetch(\n    `https://www.eventbriteapi.com/v3/events/${id}/publish/?token=${apikey}`,\n    {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  return await res.json();\n}\nexport async function getUploadSignature() {\n  const fetchToken = await fetch(\n    `https://www.eventbriteapi.com/v3/media/upload/?type=image-event-logo&token=${apikey}`\n  );\n  const data = await fetchToken.json();\n  return data;\n}\n\nexport async function uploadImage(img, url, args) {\n  const formData = new FormData();\n  for (const name in args) {\n    formData.append(name, args[name]);\n  }\n  formData.append(\"file\", img);\n  try {\n    const config = {\n      method: \"POST\",\n      body: formData\n    };\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response;\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport async function getUploadedUrl(token) {\n  try {\n    const formData = new FormData();\n    formData.append(\"upload_token\", token);\n    const response = await fetch(\n      `https://www.eventbriteapi.com/v3/media/upload/?token=${apikey}`,\n      {\n        method: \"POST\",\n        body: formData\n      }\n    );\n    return await response.json();\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}