{"version":3,"sources":["token.js","valdiationUtil.js","timeUtil.jsx","App.jsx","api/apiutil.js","serviceWorker.js","index.js"],"names":["apikey","isValidTime","start","end","Date","parse","checkCharLimit","str","limit","length","validationSchema","title","valid","invalid","date","image","organizer","ticketName","numberOfTickets","price","parseEvent","desc","dateStart","dateEnd","imgid","is_series","event","name","html","description","timezone","utc","toJSON","slice","currency","logo_id","parsePrice","cost","priceArr","split","join","parseFloat","timeOfDay","hours","minutes","ampm","offset","times","i","Math","floor","push","key","roundDate","setDate","getDate","setHours","appendTime","timeString","twelveHourtimeArray","timeArray","parseInt","parse12htime","dateString","toLocaleTimeString","calcDuration","App","useState","timeUtil","setDateStart","dateStartEndTime","setStartDateEndTime","setDateEnd","err","setErr","occurences","setOccurences","duration","setDuration","setTitle","setDescription","imgurl","setImgurl","setImgid","setTicketName","setNumberOfTickets","setPrice","validationUtil","setValidationSchema","eventurl","setEventurl","setValidity","bool","createDays","dates","curr","addDays","days","this","valueOf","call","handleInputs","e","time","endtime","target","value","Container","fluid","Row","className","Col","md","Form","onSubmit","preventDefault","Object","keys","every","stopPropagation","data","a","async","fetch","method","body","JSON","stringify","headers","res","ok","Error","json","resData","apiutil","then","concat","url","parent","rule","id","occurrence_duration","recurrence_rule","schedule","console","log","catch","error","message","count","ticket_class","quantity_total","free","Card","Header","as","Body","Group","Label","Control","required","isInvalid","isValid","type","maxLength","placeholder","onChange","Feedback","controlId","disabled","defaultValue","Alert","variant","minDate","selected","currentTarget","files","img","URL","createObjectURL","fetchToken","args","formData","FormData","append","config","response","statusText","upload_url","upload_data","token","upload_token","res2","accept","htmlFor","Image","alt","src","rows","min","max","step","map","rel","href","Button","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fb958d9.chunk.js","sourcesContent":["const apikey = '2HFMBE2GUW52R2FYGTBQ';\n\nexport default apikey;\n","export const isValidTime = (start, end) => (!(Date.parse(start) >= Date.parse(end)));\n\nexport const checkCharLimit = (str, limit) => {\n  if (str.length <= limit) {\n    return true;\n  } return false;\n};\n\nexport const validationSchema = {\n  title: {\n    valid: null,\n    invalid: null,\n  },\n  date: {\n    valid: null,\n    invalid: null,\n  },\n  image: {\n    valid: null,\n    invalid: null,\n  },\n  organizer: {\n    valid: null,\n    invalid: null,\n  },\n  ticketName: {\n    valid: null,\n    invalid: null,\n  },\n  numberOfTickets: {\n    valid: null,\n    invalid: null,\n  },\n  price: {\n    valid: null,\n    invalid: null,\n  },\n};\n\nexport const parseEvent = (\n  title,\n  desc,\n  dateStart,\n  dateEnd,\n  imgid,\n  is_series,\n) => ({\n  event: {\n    name: {\n      html: title,\n    },\n    description: {\n      html: desc,\n    },\n    start: {\n      timezone: 'America/Los_Angeles',\n      utc: `${dateStart.toJSON().slice(0, 19)}Z`,\n    },\n    end: {\n      timezone: 'America/Los_Angeles',\n      utc: `${dateEnd.toJSON().slice(0, 19)}Z`,\n    },\n    currency: 'USD',\n    logo_id: imgid,\n    is_series,\n  },\n});\n\nexport const parsePrice = (cost) => {\n  if (cost === '' || cost === 0) return 0;\n  const priceArr = cost.split('.');\n  if (priceArr.length > 1) {\n    return priceArr.join('');\n  }\n  return (parseFloat(cost) * 100);\n};\n","import React from 'react';\n// Create Day Dropdown list\nexport const dayOfWeek = () => {\n  let days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday',\n  ];\n  days = days.map((day) => <option>{day}</option>);\n  return days;\n};\n\n// Crate Time Dropdown list\nexport const timeOfDay = (offset = 0) => {\n  const times = [];\n  let hours; let minutes; let\n    ampm;\n  for (let i = 300 + offset; i <= 1340; i += 30) {\n    hours = Math.floor(i / 60);\n    minutes = i % 60;\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n    ampm = hours % 24 < 12 ? 'AM' : 'PM';\n    hours %= 12;\n    if (hours === 0) {\n      hours = 12;\n    }\n    times.push(\n      <option key={i}>\n        {hours}\n:\n        {minutes}\n        {' '}\n        {ampm}\n      </option>,\n    );\n  }\n  return times;\n};\n\n// rounds a javascript Date object  to the nearest half hour\nexport const roundDate = (date, hours) => {\n  date.setDate(date.getDate() + 1);\n  date.setHours(hours, 0, 0, 0);\n  return date;\n};\n\n// sets the time of a Date Object\nexport const appendTime = (date, timeString) => {\n  // resets the time\n  date.setHours(0, 0, 0, 0);\n  // Split hours minutes and am / pm for calculation\n  const twelveHourtimeArray = timeString.split(' ');\n  const ampm = twelveHourtimeArray[1];\n  const timeArray = twelveHourtimeArray[0].split(':');\n  let hours = parseInt(timeArray[0]);\n  const minutes = parseInt(timeArray[1]);\n  // if it is PM add 12 hours\n  if (hours === 12) {\n    hours = 0;\n  }\n  if (ampm === 'PM') {\n    hours += 12;\n  }\n  // set hours and minutes to new hours minutes\n  date.setHours(hours, minutes, 0, 0);\n  return date;\n};\n\n// sets the date of a Date object\nexport const createDate = (date, dateString) => {\n  const dateArray = dateString.split('-');\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const year = parseInt(dateArray[0]);\n  const month = parseInt(dateArray[1] - 1);\n  const day = parseInt(dateArray[2]);\n  const newDate = new Date(year, month, day, hours, minutes, 0, 0);\n  return newDate;\n};\n\nexport const parse12htime = (date) => {\n  let dateString = date.toLocaleTimeString();\n  dateString = dateString.slice(0, 4) + dateString.slice(7);\n  return dateString;\n};\n\nexport const parseDate = (date) => {\n  const year = date.getFullYear().toString();\n  let month = (date.getMonth() + 1).toString();\n  month = month < 10 ? `0${month}` : month;\n  let day = date.getDate().toString();\n  day = day < 10 ? `0${day}` : day;\n  return `${year}-${month}-${day}`;\n};\n\nexport const calcDuration = (start, end) => (Date.parse(end) - Date.parse(start)) / 1000;\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {\n  Form,\n  Container,\n  Row,\n  Col,\n  Button,\n  Alert,\n  Image,\n  Card,\n} from 'react-bootstrap';\nimport DatePicker from 'react-datepicker';\nimport * as apiutil from './api/apiutil';\nimport * as timeUtil from './timeUtil';\nimport * as validationUtil from './valdiationUtil';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nfunction App() {\n  // State Setters and getters\n  const [dateStart, setDateStart] = useState(timeUtil.roundDate(new Date(), 0));\n  const [dateStartEndTime, setStartDateEndTime] = useState(\n    timeUtil.roundDate(new Date(), 1),\n  );\n  const [dateEnd, setDateEnd] = useState(timeUtil.roundDate(new Date(), 1));\n  const [err, setErr] = useState([]);\n  const [occurences, setOccurences] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgurl, setImgurl] = useState(null);\n  const [imgid, setImgid] = useState(null);\n  const [ticketName, setTicketName] = useState('');\n  const [numberOfTickets, setNumberOfTickets] = useState(100);\n  const [price, setPrice] = useState('0.00');\n  const [validationSchema, setValidationSchema] = useState(\n    validationUtil.validationSchema,\n  );\n\n  const [eventurl, setEventurl] = useState([]);\n  // Function to set an input to valid or invalid\n  const setValidity = (bool, key) => {\n    if (bool) {\n      setValidationSchema({\n        ...validationSchema,\n        [key]: {\n          valid: bool,\n        },\n      });\n    } else {\n      setValidationSchema({\n        ...validationSchema,\n        [key]: {\n          invalid: !bool,\n        },\n      });\n    }\n  };\n\n  const createDays = (start, end) => {\n    const dates = [];\n    let curr = start;\n    const addDays = function (days) {\n      const date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n    while (curr <= end) {\n      dates.push(curr);\n      curr = addDays.call(curr, 7);\n    }\n    return dates.length;\n  };\n\n  // input handler validates and sets inputs on change\n  // switch statement based on the name of the element\n  const handleInputs = (e) => {\n    let time;\n    let endtime;\n    switch (e.target.name) {\n      case 'title':\n        if (validationUtil.checkCharLimit(e.target.value, 70)\n        && e.target.value.length > 0) {\n          setValidity(true, 'title');\n        } else {\n          setValidity(false, 'title');\n        }\n        setTitle(e.target.value);\n        break;\n      case 'ticketName':\n        if (validationUtil.checkCharLimit(e.target.value, 70)\n        && e.target.value.length > 0) {\n          setValidity(true, 'ticketName');\n        } else {\n          setValidity(false, 'ticketName');\n        }\n        setTicketName(e.target.value);\n        break;\n      case 'from':\n        time = timeUtil.appendTime(dateStart, e.target.value);\n        if (validationUtil.isValidTime(time, dateEnd)) {\n          setValidity(true, 'date');\n        } else {\n          setValidity(false, 'date');\n        }\n        setDateStart(time);\n        setDuration(timeUtil.calcDuration(time, dateStartEndTime));\n        break;\n      case 'to':\n        time = timeUtil.appendTime(dateEnd, e.target.value);\n        endtime = timeUtil.appendTime(dateStartEndTime, e.target.value);\n        if (validationUtil.isValidTime(dateStart, time)) {\n          setValidity(true, 'date');\n        } else {\n          setValidity(false, 'date');\n        }\n        setDateEnd(time);\n        setStartDateEndTime(endtime);\n        setDuration(timeUtil.calcDuration(dateStart, endtime));\n        break;\n      case 'description':\n        setDescription(e.target.value);\n        break;\n      case 'numberOfTickets':\n        setNumberOfTickets(e.target.value);\n        break;\n      case 'price':\n        setPrice(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleFrom = (date) => {\n    if (validationUtil.isValidTime(date, dateEnd)) {\n      setValidity(true, 'date');\n    } else {\n      setValidity(false, 'date');\n    }\n    setDateStart(date);\n    const days = createDays(date, dateEnd);\n    setOccurences(days);\n  };\n\n  const handleUntil = (date) => {\n    if (validationUtil.isValidTime(dateStart, date)) {\n      setValidity(true, 'date');\n    } else {\n      setValidity(false, 'date');\n    }\n    setDateEnd(date);\n    const days = createDays(dateStart, date);\n    setOccurences(days);\n  };\n\n\n  // Sumbit Handling\n  // Check if form is valid\n  // if not valid show error messages\n  // if valid\n  //  Create Event,\n  //  Create Tickets,\n  //\n  const handleSubmit = (e) => {\n    setErr([]);\n    e.preventDefault();\n    const validKeys = (key) => {\n      const value = validationSchema[key].valid;\n      return value === true || value === null;\n    };\n    const keys = Object.keys(validationSchema);\n    if (keys.every(validKeys)) {\n      e.stopPropagation();\n      const eventPackage = validationUtil.parseEvent(\n        title,\n        description,\n        dateStartEndTime,\n        dateEnd,\n        imgid,\n        occurences > 1,\n      );\n      apiutil\n        .createEvent(eventPackage)\n        .then((res) => {\n          setEventurl(eventurl.concat([res.url]));\n          return res;\n        })\n        .then((parent) => {\n          if (occurences > 1) {\n            const rule = `DTSTART:${dateStart.toJSON()}\\nRRULE:FREQ=WEEKLY;COUNT=${occurences}\n              `;\n            apiutil.createSeries(parent.id, duration, rule)\n              .catch((error) => setErr(err.concat([error.message])));\n          }\n          return parent;\n        })\n        .then((parent) => {\n          apiutil.createTicket(parent.id, price, numberOfTickets, ticketName)\n            .catch((error) => setErr(err.concat([error.message])));\n          return parent;\n        })\n        .then((parent) => {\n          apiutil.publishEvent(parent.id)\n            .catch((error) => setErr(err.concat([error.message])));\n        })\n        .catch((error) => {\n          setErr(err.concat([error.message]));\n        });\n      setDateStart(timeUtil.roundDate(new Date(), 0));\n      setStartDateEndTime(timeUtil.roundDate(new Date(), 1));\n      setDateEnd(timeUtil.roundDate(new Date(), 1));\n      setOccurences(0);\n      setDuration(0);\n      setTitle('');\n      setDescription('');\n      setImgurl(null);\n      setImgid(null);\n      setTicketName('');\n      setNumberOfTickets(100);\n      setPrice('0.00');\n    } else {\n      setErr(err.concat(['Formdata is invalid']));\n    }\n  };\n\n  // image upload\n  // 1 use local image until upload is successfull\n  // 2 get upload token from eventbrite api\n  // 3 upload image to aws using evenbrite data\n  // 5 get image url from evenbrite api\n  // 5 set new image url as new image\n  const uploadBanner = (e) => {\n    if (e.currentTarget.files[0]) {\n      const img = e.currentTarget.files[0];\n      setImgurl(URL.createObjectURL(img));\n      apiutil.getUploadSignature().then((res) => {\n        apiutil\n          .uploadImage(img, res.upload_url, res.upload_data)\n          .then(() => apiutil.getUploadedUrl(res.upload_token))\n          .then((res2) => {\n            setImgid(res2.id);\n            setImgurl(res2.url);\n          });\n      });\n    }\n  };\n\n  return (\n    <main>\n      <Container fluid>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <h1 className=\"title\">Eventbrite</h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <h4 className=\"title\">Event Creation Tool</h4>\n          </Col>\n        </Row>\n        <Form onSubmit={handleSubmit}>\n          <Row>\n            <Col>\n              <Card className=\"mt-3\">\n                <Card.Header as=\"h5\">Title</Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                      required\n                      isInvalid={validationSchema.title.invalid}\n                      isValid={validationSchema.title.valid}\n                      name=\"title\"\n                      type=\"text\"\n                      maxLength=\"70\"\n                      placeholder=\"Give it a short distinct name\"\n                      value={title}\n                      onChange={handleInputs}\n                    />\n                    <Form.Control.Feedback type=\"valid\">\n                      Looks Good\n                    </Form.Control.Feedback>\n                    <Form.Control.Feedback type=\"invalid\">\n                      A Title is required\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card className=\"mt-3\">\n                <Card.Header as=\"h5\">Location</Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Form.Group controlId=\"VenueName\">\n                      <Form.Control placeholder=\"Venue Name\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"formGridAddress1\">\n                      <Form.Label>Address</Form.Label>\n                      <Form.Control placeholder=\"1234 Main St\" />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formGridAddress2\">\n                      <Form.Label>Address 2</Form.Label>\n                      <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                    </Form.Group>\n\n                    <Form.Row>\n                      <Form.Group as={Col} controlId=\"formGridCity\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control />\n                      </Form.Group>\n\n                      <Form.Group as={Col} controlId=\"formGridState\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control as=\"select\">\n                          <option>CA</option>\n                          <option>NY</option>\n                        </Form.Control>\n                      </Form.Group>\n\n                      <Form.Group as={Col} controlId=\"formGridZip\">\n                        <Form.Label>Zip</Form.Label>\n                        <Form.Control />\n                      </Form.Group>\n                    </Form.Row>\n                  </Form.Group>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card className=\"mt-3\">\n                <Card.Header as=\"h5\">Schedule Dates</Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Row>\n                      <Col>\n                        <Form.Label>How Often?</Form.Label>\n                        <Form.Control disabled defaultValue=\"Weekly\" />\n                      </Col>\n                    </Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Row>\n                      <Col>\n                        <Form.Label>From</Form.Label>\n                        <Form.Control\n                          required\n                          name=\"from\"\n                          onChange={handleInputs}\n                          value={timeUtil.parse12htime(dateStart)}\n                          isInvalid={validationSchema.date.invalid}\n                          isValid={validationSchema.date.valid}\n                          as=\"select\"\n                        >\n                          {timeUtil.timeOfDay()}\n                        </Form.Control>\n                        <Form.Control.Feedback type=\"invalid\">\n                          Must be before end time.\n                        </Form.Control.Feedback>\n                      </Col>\n                      <Col>\n                        <Form.Label>To</Form.Label>\n                        <Form.Control\n                          required\n                          name=\"to\"\n                          onChange={handleInputs}\n                          value={timeUtil.parse12htime(dateEnd)}\n                          as=\"select\"\n                          isInvalid={validationSchema.date.invalid}\n                          isValid={validationSchema.date.valid}\n                        >\n                          {timeUtil.timeOfDay(30)}\n                        </Form.Control>\n                        <Form.Control.Feedback type=\"invalid\">\n                          Must be Afer start time.\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        {duration > 0 ? (\n                          <Alert className=\"eventlist\" variant=\"success\">\n                            Duration of\n                            {' '}\n                            {duration / 60}\n                            {' '}\n    Minutes\n                          </Alert>\n                        ) : (\n                          ''\n                        )}\n                      </Col>\n                    </Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Row>\n                      <Col>\n                        <p>Occurs From:</p>\n                        <DatePicker\n                          className=\"form-control\"\n                          minDate={dateStart}\n                          onChange={handleFrom}\n                          selected={dateStart}\n                          isInvalid={validationSchema.date.invalid}\n                          isValid={validationSchema.date.valid}\n                        />\n                      </Col>\n                      <Col>\n                        <p>Occurs Until</p>\n                        <DatePicker\n                          className=\"form-control\"\n                          onChange={handleUntil}\n                          minDate={dateEnd}\n                          selected={dateEnd}\n                          isInvalid={validationSchema.date.invalid}\n                          isValid={validationSchema.date.valid}\n                        />\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        {occurences > 0 ? (\n                          <Alert className=\"eventlist\" variant=\"success\">\n                            {occurences}\n                            {' '}\n    Events\n                          </Alert>\n                        ) : (\n                          ''\n                        )}\n                      </Col>\n                    </Row>\n                  </Form.Group>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card className=\"mt-3\">\n                <Card.Header as=\"h5\">Event Image</Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Form.Label>Event Image</Form.Label>\n                    <Row>\n                      <Col className=\"image-upload\">\n                        <div className=\"img-upload-inner\">\n                          <Form.Control\n                            className=\"inputfile\"\n                            id=\"file\"\n                            type=\"file\"\n                            onChange={uploadBanner}\n                            accept=\"image/png, image/jpeg\"\n                            isInvalid={false}\n                          />\n                          <Form.Label htmlFor=\"file\">\n                            {imgurl ? (\n                              <Image alt=\"banner\" src={imgurl} fluid />\n                            ) : (\n                              <div className=\"default-img\">\n                                {' '}\n                                <i className=\"fa fa-camera\" />\n                                <h6>Add Event Image</h6>\n                                <p>\n                                  Choose a compelling image that brings your event\n                                  to life\n                                </p>\n                              </div>\n                            )}\n                          </Form.Label>\n                          <Form.Control.Feedback type=\"invalid\">\n                          Must be less than 10MB.\n                          </Form.Control.Feedback>\n                        </div>\n                      </Col>\n                    </Row>\n                  </Form.Group>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card className=\"mt-3\">\n                <Card.Header as=\"h5\">Description</Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Form.Label>Event Description</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      rows=\"4\"\n                      name=\"description\"\n                      onChange={handleInputs}\n                      value={description}\n                    />\n                  </Form.Group>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card className=\"mt-3\">\n                <Card.Header as=\"h5\">Tickets</Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Row>\n                      <Col>\n                        <Form.Label>Ticket Name</Form.Label>\n                        <Form.Control\n                          required\n                          type=\"text\"\n                          value={ticketName}\n                          name=\"ticketName\"\n                          onChange={handleInputs}\n                          placeholder=\"Ticket Name\"\n                          isValid={validationSchema.ticketName.valid}\n                          isInvalid={validationSchema.ticketName.invalid}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Ticket name is required.\n                        </Form.Control.Feedback>\n                      </Col>\n                      <Col>\n                        <Form.Label>Quantity Available</Form.Label>\n                        <Form.Control\n                          value={numberOfTickets}\n                          min=\"1\"\n                          max=\"30000\"\n                          name=\"numberOfTickets\"\n                          onChange={handleInputs}\n                          type=\"number\"\n                          placeholder=\"100\"\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Must have one or more tickets.\n                        </Form.Control.Feedback>\n                      </Col>\n                      <Col>\n                        <Form.Label>Price</Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          min=\"0.00\"\n                          max=\"10000.00\"\n                          step=\"0.01\"\n                          placeholder=\"Free\"\n                          name=\"price\"\n                          value={price}\n                          onChange={handleInputs}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Must be a postitive number that is less than 10000\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Row>\n                  </Form.Group>\n                  <Row>\n                    <Col>\n                      {eventurl.length > 0 ? (\n                        <Alert className=\"eventlist\" variant=\"success\">\n                          <h6>Event URL</h6>\n                          {eventurl.map((url) => (\n                            <Row key={url}>\n                              <Col>\n                                <a rel=\"noopener noreferrer\" target=\"_blank\" href={url}>{url}</a>\n                              </Col>\n                            </Row>\n                          ))}\n                        </Alert>\n                      ) : (\n                        ''\n                      )}\n                      {err.length > 0 ? (\n                        <Alert className=\"eventlist\" variant=\"danger\">\n                          <h6>Error</h6>\n                          {err}\n                        </Alert>\n                      ) : (\n                        ''\n                      )}\n                    </Col>\n                  </Row>\n                  <Button variant=\"success\" type=\"submit\" size=\"lg\">\n                  Create Event\n                  </Button>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","import apikey from '../token';\nimport { parsePrice } from '../valdiationUtil';\n\nexport async function createEvent(data) {\n  const res = await fetch(\n    `https://www.eventbriteapi.com/v3/organizations/64592771355/events/?token=${apikey}`,\n    {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    },\n  );\n  if (!res.ok) {\n    throw new Error('Event Data is Incomplete');\n  }\n  const resData = await res.json();\n  return resData;\n}\n\nexport async function createSeries(id, occurrence_duration, recurrence_rule) {\n  const res = await fetch(\n    `https://www.eventbriteapi.com/v3/events/${id}/schedules/?token=${apikey}`,\n    {\n      method: 'post',\n      body: JSON.stringify({\n        schedule: {\n          occurrence_duration,\n          recurrence_rule,\n        },\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    },\n  );\n  const data = await res.json();\n  console.log(data);\n  return data;\n}\n\nexport async function createTicket(id, cost, count, name) {\n  let res;\n  cost = parsePrice(cost);\n  if (cost === '000') {\n    res = await fetch(\n      ` https://www.eventbriteapi.com/v3/events/${id}/ticket_classes/?token=${apikey}`,\n      {\n        method: 'post',\n        body: JSON.stringify({\n          ticket_class: {\n            name,\n            quantity_total: count,\n            free: true,\n          },\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n  } else {\n    res = await fetch(\n      ` https://www.eventbriteapi.com/v3/events/${id}/ticket_classes/?token=${apikey}`,\n      {\n        method: 'post',\n        body: JSON.stringify({\n          ticket_class: {\n            name,\n            quantity_total: count,\n            cost: `USD, ${cost}`,\n          },\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n  }\n  if (!res.ok) {\n    throw new Error('Ticket Info is Incorrect');\n  }\n  const data = await res.json();\n  return data;\n}\n\nexport async function publishEvent(id) {\n  const res = await fetch(\n    `https://www.eventbriteapi.com/v3/events/${id}/publish/?token=${apikey}`,\n    {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    },\n  );\n  if (!res.ok) {\n    throw new Error('Could Not Publish Event');\n  }\n  return res.json();\n}\nexport async function getUploadSignature() {\n  const fetchToken = await fetch(\n    `https://www.eventbriteapi.com/v3/media/upload/?type=image-event-logo&token=${apikey}`,\n  );\n  const data = await fetchToken.json();\n  return data;\n}\n\nexport async function uploadImage(img, url, args) {\n  const formData = new FormData();\n  for (const name in args) {\n    formData.append(name, args[name]);\n  }\n  formData.append('file', img);\n  try {\n    const config = {\n      method: 'POST',\n      body: formData,\n    };\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response;\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport async function getUploadedUrl(token) {\n  try {\n    const formData = new FormData();\n    formData.append('upload_token', token);\n    const response = await fetch(\n      `https://www.eventbriteapi.com/v3/media/upload/?token=${apikey}`,\n      {\n        method: 'POST',\n        body: formData,\n      },\n    );\n    return await response.json();\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}